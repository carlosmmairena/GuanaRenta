/*
 * Clase de tipo JDialog para los alquileres
 */
package com.guanarenta.view;

import com.guanarenta.clases.Alquileres;
import com.guanarenta.connections.Enlace;
import com.guanarenta.connections.OperacionesAlquiler;
import com.guanarenta.storage.StorageAlquileres;
import com.guanarenta.storage.StorageInquilinos;
import com.guanarenta.storage.StoragePropietarios;
import com.guanarenta.storage.StorageViviendas;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sharlene Guadamuz
 * @author Carlos Mairena
 */
public class DlgAlquileres extends javax.swing.JDialog {

    StorageInquilinos storageInquilinos;
    StorageViviendas storageViviendas;
    StorageAlquileres storageAlquileres;
    StoragePropietarios storagePropietarios;
    Alquileres alquiler;

    //String ENCABEZADO_TABLA[];
    DefaultTableModel alquileresTabla;
    OperacionesAlquiler operacionAl;
    private int inQui;
    private int inVi;

    /**
     * Creates new form DlgAlquileres
     *
     * @param parent
     * @param modal
     */
    public DlgAlquileres(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.operacionAl = new OperacionesAlquiler();

        this.storageAlquileres = new StorageAlquileres();
        this.alquiler = new Alquileres();
        this.storageInquilinos = new StorageInquilinos();
        this.storageViviendas = new StorageViviendas();
        dtpFechContrato.setDate(Date.from(Instant.now()));
    }

    /**
     * Constructor que permite obtener los vectores de alquileres, viviendas y propietarios.
     *
     * @param parent
     * @param modal
     * @param storageAlquileres Contiene los vectores de alquileres
     * @param storageInquilinos Contiene los vectores de inquilinos
     * @param storageViviendas Contiene los vectores de viviendas
     * @param storagePropietarios
     */
    public DlgAlquileres(java.awt.Frame parent, boolean modal, StorageAlquileres storageAlquileres, StorageInquilinos storageInquilinos, StorageViviendas storageViviendas, StoragePropietarios storagePropietarios) {
        super(parent, modal);
        initComponents();
        this.operacionAl = new OperacionesAlquiler();

        this.storageInquilinos = storageInquilinos;
        this.storageViviendas = storageViviendas;
        this.storageAlquileres = storageAlquileres;
        this.storagePropietarios = storagePropietarios;
        alquiler = null;
        this.inQui = -1;
        this.inVi = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngEstadosContrado = new javax.swing.ButtonGroup();
        tbdAlquileres = new javax.swing.JTabbedPane();
        pnlAlquileresTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAlquileres = new javax.swing.JTable();
        pnlOpcionesPropietarios = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnInicio = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        lblBuscar = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        pnlAnadirEditarAlquiler = new javax.swing.JPanel();
        lblNumAlquiler = new javax.swing.JLabel();
        txtNumAlquiler = new javax.swing.JTextField();
        lblFechInicio = new javax.swing.JLabel();
        lblCantAdultos = new javax.swing.JLabel();
        txtDeposito = new javax.swing.JTextField();
        lblCantNinos = new javax.swing.JLabel();
        txtMontoAlquiler = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtIDVivienda = new javax.swing.JTextField();
        lblMontoDeposito = new javax.swing.JLabel();
        txtCantAdultos = new javax.swing.JTextField();
        lblMontoAlquiler = new javax.swing.JLabel();
        txtCantNi√±os = new javax.swing.JTextField();
        lblCedulaInqui = new javax.swing.JLabel();
        txtCedulaInqui = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        lblIdVivienda = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        lblCantMeses = new javax.swing.JLabel();
        txtCantMeses = new javax.swing.JTextField();
        dtpFechContrato = new com.toedter.calendar.JDateChooser();
        lblAumentoAnual = new javax.swing.JLabel();
        pnlEstado = new javax.swing.JPanel();
        rdbVigente = new javax.swing.JRadioButton();
        rdbCancelado = new javax.swing.JRadioButton();
        btnLimpiarCampos = new javax.swing.JButton();
        btnSelecInquilino = new javax.swing.JButton();
        btnSelecIdVivienda = new javax.swing.JButton();
        spnAumentos = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GuanaRenta - Alquileres");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlAlquileresTabla.setBackground(new java.awt.Color(254, 254, 254));

        tblAlquileres.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        tblAlquileres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblAlquileres.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblAlquileres.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblAlquileres.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblAlquileres);

        pnlOpcionesPropietarios.setBackground(new java.awt.Color(254, 254, 254));
        pnlOpcionesPropietarios.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));

        btnNuevo.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/add.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/delete.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/edit.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnInicio.setBackground(new java.awt.Color(225, 241, 249));
        btnInicio.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnInicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/back.png"))); // NOI18N
        btnInicio.setText("Regresar");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOpcionesPropietariosLayout = new javax.swing.GroupLayout(pnlOpcionesPropietarios);
        pnlOpcionesPropietarios.setLayout(pnlOpcionesPropietariosLayout);
        pnlOpcionesPropietariosLayout.setHorizontalGroup(
            pnlOpcionesPropietariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOpcionesPropietariosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        pnlOpcionesPropietariosLayout.setVerticalGroup(
            pnlOpcionesPropietariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOpcionesPropietariosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOpcionesPropietariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        lblBuscar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBuscar.setText("Buscar ID:");

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlAlquileresTablaLayout = new javax.swing.GroupLayout(pnlAlquileresTabla);
        pnlAlquileresTabla.setLayout(pnlAlquileresTablaLayout);
        pnlAlquileresTablaLayout.setHorizontalGroup(
            pnlAlquileresTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlquileresTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(pnlAlquileresTablaLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(pnlOpcionesPropietarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(pnlAlquileresTablaLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAlquileresTablaLayout.setVerticalGroup(
            pnlAlquileresTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlquileresTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAlquileresTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlOpcionesPropietarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAlquileresTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
        );

        tbdAlquileres.addTab("Alquileres", pnlAlquileresTabla);

        pnlAnadirEditarAlquiler.setBackground(new java.awt.Color(254, 254, 254));
        pnlAnadirEditarAlquiler.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNumAlquiler.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNumAlquiler.setText("Num. Alquiler");
        pnlAnadirEditarAlquiler.add(lblNumAlquiler, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 40, 96, 33));

        txtNumAlquiler.setEditable(false);
        pnlAnadirEditarAlquiler.add(txtNumAlquiler, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 40, 214, -1));

        lblFechInicio.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFechInicio.setText("Fecha inicio");
        pnlAnadirEditarAlquiler.add(lblFechInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 85, 96, 34));

        lblCantAdultos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCantAdultos.setText("Cant.Adultos");
        pnlAnadirEditarAlquiler.add(lblCantAdultos, new org.netbeans.lib.awtextra.AbsoluteConstraints(467, 41, 125, 33));

        txtDeposito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDepositoKeyTyped(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(txtDeposito, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 177, 214, -1));

        lblCantNinos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCantNinos.setText("Cantidad Ni√±os");
        pnlAnadirEditarAlquiler.add(lblCantNinos, new org.netbeans.lib.awtextra.AbsoluteConstraints(467, 86, 125, 34));

        txtMontoAlquiler.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMontoAlquilerKeyTyped(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(txtMontoAlquiler, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 132, 210, -1));
        pnlAnadirEditarAlquiler.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(763, 388, -1, -1));

        txtIDVivienda.setEditable(false);
        pnlAnadirEditarAlquiler.add(txtIDVivienda, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 222, 160, -1));

        lblMontoDeposito.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMontoDeposito.setText("Monto Dep√≥sito");
        pnlAnadirEditarAlquiler.add(lblMontoDeposito, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 176, 96, 34));

        txtCantAdultos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantAdultosKeyTyped(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(txtCantAdultos, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 41, 210, -1));

        lblMontoAlquiler.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMontoAlquiler.setText("Monto  Alquiler");
        pnlAnadirEditarAlquiler.add(lblMontoAlquiler, new org.netbeans.lib.awtextra.AbsoluteConstraints(467, 132, 125, 27));

        txtCantNi√±os.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantNi√±osKeyTyped(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(txtCantNi√±os, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 87, 210, -1));

        lblCedulaInqui.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCedulaInqui.setText("C√©dula Inquilino");
        pnlAnadirEditarAlquiler.add(lblCedulaInqui, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 222, 99, 33));

        txtCedulaInqui.setEditable(false);
        pnlAnadirEditarAlquiler.add(txtCedulaInqui, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 222, 150, -1));
        pnlAnadirEditarAlquiler.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(763, 439, -1, -1));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/save.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 390, 170, 45));

        lblIdVivienda.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblIdVivienda.setText("ID Vivienda");
        pnlAnadirEditarAlquiler.add(lblIdVivienda, new org.netbeans.lib.awtextra.AbsoluteConstraints(467, 222, 125, 33));

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/cancelar.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 390, 170, 45));

        lblCantMeses.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCantMeses.setText("Cant Meses");
        pnlAnadirEditarAlquiler.add(lblCantMeses, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 131, 96, 33));

        txtCantMeses.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantMesesKeyTyped(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(txtCantMeses, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 131, 214, -1));

        dtpFechContrato.setMaxSelectableDate(new java.util.Date(2524633263000L));
        dtpFechContrato.setMinSelectableDate(Date.from(Instant.now())
        );
        pnlAnadirEditarAlquiler.add(dtpFechContrato, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 86, 214, -1));

        lblAumentoAnual.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAumentoAnual.setText("Aumento anual");
        pnlAnadirEditarAlquiler.add(lblAumentoAnual, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 180, 125, 25));

        pnlEstado.setBackground(new java.awt.Color(254, 254, 254));
        pnlEstado.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado del alquiler"));

        btngEstadosContrado.add(rdbVigente);
        rdbVigente.setSelected(true);
        rdbVigente.setText("Vigente");

        btngEstadosContrado.add(rdbCancelado);
        rdbCancelado.setText("Cancelado");

        javax.swing.GroupLayout pnlEstadoLayout = new javax.swing.GroupLayout(pnlEstado);
        pnlEstado.setLayout(pnlEstadoLayout);
        pnlEstadoLayout.setHorizontalGroup(
            pnlEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbVigente, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153)
                .addComponent(rdbCancelado, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlEstadoLayout.setVerticalGroup(
            pnlEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEstadoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbVigente)
                    .addComponent(rdbCancelado))
                .addContainerGap())
        );

        pnlAnadirEditarAlquiler.add(pnlEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 300, -1, -1));

        btnLimpiarCampos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/clean.png"))); // NOI18N
        btnLimpiarCampos.setText("Limpiar Campos");
        btnLimpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarCamposActionPerformed(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(btnLimpiarCampos, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 390, 170, 45));

        btnSelecInquilino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/buscar_propietario.png"))); // NOI18N
        btnSelecInquilino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecInquilinoActionPerformed(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(btnSelecInquilino, new org.netbeans.lib.awtextra.AbsoluteConstraints(354, 222, 58, 33));

        btnSelecIdVivienda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/buscar_propietario.png"))); // NOI18N
        btnSelecIdVivienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecIdViviendaActionPerformed(evt);
            }
        });
        pnlAnadirEditarAlquiler.add(btnSelecIdVivienda, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 220, 48, 33));

        spnAumentos.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));
        spnAumentos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlAnadirEditarAlquiler.add(spnAumentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 180, 110, 33));

        tbdAlquileres.addTab("A√±adir", pnlAnadirEditarAlquiler);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbdAlquileres)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbdAlquileres)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // Al momento de que den al bot√≥n de nuevo
        tbdAlquileres.setTitleAt(1, "A√±adir");
        txtNumAlquiler.setText(Integer.toString(storageAlquileres.getNumAlquiler() + 1));
        // Desactivamos las opciones de editar el estado, ya que por defecto ser√° Vigente.
        rdbCancelado.setEnabled(false);
        rdbVigente.setEnabled(false);
        //rdbVencido.setEnabled(false);
        this.cambiarPesta√±aEN();

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Bot√≥n que llama al m√©todo que elimina un propietario envi√°ndole un √≠ndice
        try {
            int index = tblAlquileres.getSelectedRow();
            this.storageAlquileres.BorrarAlquiler(index);
            this.rellenarTblAlquileres();
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Por favor aseg√∫rese de seleccionar un alquiler.");
            System.out.println(ex.getCause());
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        this.btnEdita();
    }//GEN-LAST:event_btnEditarActionPerformed
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Al momento en que se abre la ventana.
        this.rellenarTblAlquileres();
        tbdAlquileres.setEnabledAt(1, false);

    }//GEN-LAST:event_formWindowOpened

    private void txtCantMesesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantMesesKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantMesesKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // Al hacer click en el bot√≥n de cancelar
        this.limpiarCampos();
        this.cambiarPesta√±aT();

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.btnGuarda();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtCantNi√±osKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantNi√±osKeyTyped
        // solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantNi√±osKeyTyped

    private void txtCantAdultosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantAdultosKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantAdultosKeyTyped

    private void txtMontoAlquilerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoAlquilerKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMontoAlquilerKeyTyped

    private void txtDepositoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDepositoKeyTyped
        // TODO add your handling code here:
        //solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDepositoKeyTyped

    private void btnLimpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarCamposActionPerformed
        // Bot√≥n que limpia los campos
        this.limpiarCampos();
    }//GEN-LAST:event_btnLimpiarCamposActionPerformed

    private void btnSelecInquilinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecInquilinoActionPerformed
        this.selecInquilino();
    }//GEN-LAST:event_btnSelecInquilinoActionPerformed

    private void selecInquilino() {
        try {
            DlgInquilinos inquilW = new DlgInquilinos(null, true, storageInquilinos, this.inQui);
            inquilW.setVisible(true);
            this.inQui = inquilW.getInQui();
            txtCedulaInqui.setText(Long.toString(this.inQui));
            System.out.println("Inquilino extra√≠do: " + inQui);

        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getCause());
            JOptionPane.showMessageDialog(this, "No ha seleccionado nig√∫n inquilino.");
        }
    }

    private void btnSelecIdViviendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecIdViviendaActionPerformed
        this.selecIdVivienda();
    }//GEN-LAST:event_btnSelecIdViviendaActionPerformed

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        // Cerramos la ventana
        this.dispose();
    }//GEN-LAST:event_btnInicioActionPerformed

    private void txtBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyTyped
        this.btnBuscar();
    }//GEN-LAST:event_txtBuscarKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgAlquileres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                DlgAlquileres dialog = new DlgAlquileres(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnInicio;
    private javax.swing.JButton btnLimpiarCampos;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSelecIdVivienda;
    private javax.swing.JButton btnSelecInquilino;
    private javax.swing.ButtonGroup btngEstadosContrado;
    private com.toedter.calendar.JDateChooser dtpFechContrato;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAumentoAnual;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblCantAdultos;
    private javax.swing.JLabel lblCantMeses;
    private javax.swing.JLabel lblCantNinos;
    private javax.swing.JLabel lblCedulaInqui;
    private javax.swing.JLabel lblFechInicio;
    private javax.swing.JLabel lblIdVivienda;
    private javax.swing.JLabel lblMontoAlquiler;
    private javax.swing.JLabel lblMontoDeposito;
    private javax.swing.JLabel lblNumAlquiler;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnlAlquileresTabla;
    private javax.swing.JPanel pnlAnadirEditarAlquiler;
    private javax.swing.JPanel pnlEstado;
    private javax.swing.JPanel pnlOpcionesPropietarios;
    private javax.swing.JRadioButton rdbCancelado;
    private javax.swing.JRadioButton rdbVigente;
    private javax.swing.JSpinner spnAumentos;
    private javax.swing.JTabbedPane tbdAlquileres;
    private javax.swing.JTable tblAlquileres;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCantAdultos;
    private javax.swing.JTextField txtCantMeses;
    private javax.swing.JTextField txtCantNi√±os;
    private javax.swing.JTextField txtCedulaInqui;
    private javax.swing.JTextField txtDeposito;
    private javax.swing.JTextField txtIDVivienda;
    private javax.swing.JTextField txtMontoAlquiler;
    private javax.swing.JTextField txtNumAlquiler;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Este se llama para editar los datos del alquiler seleccionado
     */
    private void btnEdita(){
        try {
            // Falta validar los campos

            this.limpiarCampos();
            int fila = tblAlquileres.getSelectedRow();
            //this.alquiler = storageAlquileres.obtenerAlquiler(index);
            
            // Buscamos el registro en la BD y luego lo agregamos a nuestro objeto alquiler
            ArrayList<Alquileres> alquiAr = operacionAl.FiltroBD(Enlace.crearEnlace(), "numAlquiler",
                    tblAlquileres.getValueAt(fila, 0).toString(), "TblAlquileres");
            this.alquiler = alquiAr.get(0);
            
            // Obten√≠amos los datos desde el vector
            // this.recuperaIdCed();

            txtNumAlquiler.setText(Integer.toString(this.alquiler.getNumAlquiler())); // Obtenemos el n√∫mero de alquiler.
            txtCantAdultos.setText(Integer.toString(this.alquiler.getNumAdultos()));
            txtCantMeses.setText(Integer.toString(this.alquiler.getCanMeses()));
            txtCantNi√±os.setText(Integer.toString(this.alquiler.getNumNinos()));
            txtCedulaInqui.setText(Long.toString(this.alquiler.getCedInquilino()));
            txtDeposito.setText(Double.toString(this.alquiler.getDepositoGarantia()));
            txtIDVivienda.setText(Integer.toString(this.alquiler.getIdVivienda()));
            txtMontoAlquiler.setText(Double.toString(this.alquiler.getPrecioAlquiler()));
            spnAumentos.setValue(this.alquiler.getPorcIncremAnual());
            dtpFechContrato.setDate(this.alquiler.getFechContrato());

            if (alquiler.getEstado().equals("Cancelado")) {
                rdbCancelado.setSelected(true);
            } else if (alquiler.getEstado().equals("Vigente")){
                rdbVigente.setSelected(true);
            } else {
                System.out.println("Este alquiler est√° vencido, entonces se pone vigente al cancelar "
                        + "la mensualidads");
            }

            tbdAlquileres.setTitleAt(1, "Editar");
            rdbCancelado.setEnabled(true);
            rdbVigente.setEnabled(true);
            this.cambiarPesta√±aEN();

        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Por favor aseg√∫rese de seleccionar un alquiler registrado");
            System.out.println(ex.getCause());
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DlgAlquileres.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Se llama para registrar un alquiler
     */
    private void btnGuarda() {
        try {
            /*
            En este m√©todo deben pasar lo siguiente:
                1. Cuando se guarde el alquiler, el estado de la vivienda seleccionada debe pasar a "Alquilada".
                2. La fecha de contrato no debe ser un d√≠a pasado.
                3. No se puede alquilar una vivienda que tenga un estado diferente a "Disponible".
                4. Una vez guardado el alquiler, se debe tener en cuenta el tiempo del alquiler, si se pasa cambia
            al estado de "vencido".
                5. El estado por defecto del alquiler es "Vigente", ya que uno paga antes el alquiler y no despu√©s
             */

            this.alquiler = new Alquileres(); // Inicializamos el objeto

            //long cedIn = storageInquilinos.obtenerInquilino(this.inQui).getCedInqui(); // Obtenemos la c√©dula de un inquilino seleccionado en la tabla
            //int indexId = storageViviendas.obtenerVivienda(this.inVi).getIdVivienda(); // Obtenemos el ID de una vivienda seleccionada en la tabla

            //this.storageViviendas.obtenerVivienda(inVi).setEstado("Alquilada"); // Colocamos como alquilada al estado de la vivienda
            // Encontrar otra manera de cambiar el estado de la vivienda seleccionada
            this.alquiler.setCanMeses(Byte.parseByte(txtCantMeses.getText()));
            this.alquiler.setDepositoGarantia(Double.parseDouble(txtDeposito.getText()));
            this.alquiler.setCedInquilino(Long.parseLong(txtCedulaInqui.getText())); // Enviamos la c√©dula obtenida
            this.alquiler.setIdVivienda(Integer.parseInt(txtIDVivienda.getText())); // Enviamos el ID de la vivienda obtenida
            this.alquiler.setPorcIncremAnual(Byte.parseByte(spnAumentos.getValue().toString())); // Obtenemos el procentaje
            this.alquiler.setPrecioAlquiler(Double.parseDouble(txtMontoAlquiler.getText()));
            //this.alquiler.setNumAlquiler(Integer.parseInt(txtNumAlquiler.getText()));

            // Cambiar este calendario o al menos el dise√±o
            long obtFech = dtpFechContrato.getDate().getTime(); // Obtenemos la fechan en el tipo long
            this.alquiler.setFechContrato(new java.sql.Date(obtFech)); // Obtenemos la fecha de contrato

            // En este caso es porque seleccionaron un estado de alquiler
            if (tbdAlquileres.getTitleAt(1).equals("A√±adir")) { // Si el t√≠tulo dice A√±adir

                if (operacionAl.guardarAlquiler(Enlace.crearEnlace(), alquiler)) {
                    JOptionPane.showMessageDialog(this, "Alquiler registrado");
                    this.cambiarPesta√±aT();
                    this.limpiarCampos();

                } else {
                    JOptionPane.showMessageDialog(this, "Hubo un inconveniente al intentar guardar el alquiler");
                }
                // El n√∫mero de alquiler se crea autom√°ticamente en la BD
                //this.alquiler.setNumAlquiler(storageAlquileres.crearNum()); // Creamos el n√∫mero del alquiler
                //this.storageAlquileres.GuardarAlquiler(this.alquiler); // Agrega este objeto alquiler a los vectores de alquiler

            } else { // Si el t√≠tulo no dice a√±adir
                //int index = tblAlquileres.getSelectedRow(); // Obtiene el √≠ndice de la tabla seleccionado para editar
                this.alquiler.setNumAlquiler(Integer.parseInt(txtNumAlquiler.getText()));
                this.estadosViviendaAlquiler();
                //this.alquiler.setNumAlquiler(Integer.parseInt(txtNumAlquiler.getText()));
                //this.storageAlquileres.EditarAlquiler(index, this.alquiler); // Env√≠a al objeto con su respectivo √≠ndice para editar
                if (operacionAl.editarAlquiler(Enlace.crearEnlace(), alquiler)) {
                    JOptionPane.showMessageDialog(this, "Alquiler editado");
                    this.cambiarPesta√±aT();
                    this.limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(this, "Hubo un inconveniente al intentar editar el alquiler");

                }
            }

        } catch (ArrayIndexOutOfBoundsException es) {

            JOptionPane.showMessageDialog(this, "Por favor seleccione una vivienda y un inquilino.");
            System.out.println(es.getCause());
            es.printStackTrace();

        } catch (NumberFormatException esc) {

            System.out.println(esc.getMessage());
            JOptionPane.showMessageDialog(this, "Ingrese correctamente los datos");

        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DlgAlquileres.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Se llama para realizar una b√∫squeda
     */
    private void btnBuscar() {
        //        this.ENCABEZADO_TABLA = new String[]{"Nombre", "C√©dula", "G√©nero", "E-mail", "Tel√©fono"};
//        this.alquiler = new Alquileres();
//        // Creamos el modelo restringiendo que se editen sus celdas.
//        this.alquileresTabla = new DefaultTableModel(null, this.ENCABEZADO_TABLA) {
//            @Override
//            public boolean isCellEditable(int rowIndex, int columnIndex) {
//                return false;
//            }
//        };
        try {
            if (txtBuscar.getText().length() == 0) {
                this.rellenarTblAlquileres();

            } else {

                //            for (byte i = 0; i < storageAlquileres.getTotal(); i++) {
//
//                this.alquiler = storageAlquileres.obtenerAlquiler(i);
//                if (Integer.toString(alquiler.getIdVivienda()).regionMatches(true, 0, txtBuscar.getText(), 0, txtBuscar.getText().length())) {
//
//                    Object registro[] = {this.alquiler.getNumAlquiler(), this.alquiler.getFechContrato(), this.alquiler.getEstado(),
//                        this.alquiler.getIdVivienda(), this.alquiler.getCedInquilino(), this.alquiler.getPrecioAlquiler(),
//                        this.alquiler.getDepositoGarantia(), this.alquiler.getPorcIncremAnual() + "%"};
//
//                    this.alquileresTabla.addRow(registro);
//
//                }
//            }
                this.alquileresTabla = operacionAl.BuscarFiltrado(Enlace.crearEnlace(), "numAlquiler",
                        txtBuscar.getText(), "TblAlquileres");
                tblAlquileres.setModel(alquileresTabla);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DlgAlquileres.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Se extrae la vivienda seleccionada desp√∫es de abrir la ventana de las viviendas
     */
    private void selecIdVivienda() {
        try {
            DlgViviendas viviW = new DlgViviendas(null, true, this.storagePropietarios, storageViviendas, this.inVi);
            viviW.setVisible(true);
            this.inVi = viviW.getInVi();
            txtIDVivienda.setText(Integer.toString(inVi));
            System.out.println("ID de vivienda extra√≠da: " + inVi);

        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getCause());
            JOptionPane.showMessageDialog(this, "No ha seleccionado niguna vivienda.");
        }
    }

    /**
     * Este m√©todo permite recuperar el √≠ndice del ID de la vivienda y la c√©dula del propietario
     * Ya que esos datos son los que est√° enlazado, esto tal vez lo hace MySQL
     */
    private void recuperaIdCed() {

        // Ciclo que nos permite recorrer cada posici√≥n registrada del vector de viviendas hasta obtener el √≠ndice del ID actual
        for (int i = 0; i < storageViviendas.getTotal(); i++) {

            if (alquiler.getIdVivienda() == storageViviendas.obtenerVivienda(i).getIdVivienda()) {
                this.inVi = i;
                break;
            }
        }

        // Ciclo que nos permite recorrer cada posici√≥n registrada del vector de inquilinos hasta obtener el √≠ndice de la c√©dula actual
        for (int i = 0; i < storageInquilinos.getTotal(); i++) {

            if (alquiler.getCedInquilino() == storageInquilinos.obtenerInquilino(i).getCedInqui()) {
                this.inQui = i;
                break;
            }
        }
    }

    /**
     * M√©todo que cambia el estado de la vivienda y del alquiler solo cuando se est√© editando.
     *
     */
    private void estadosViviendaAlquiler() {

        if (rdbCancelado.isSelected()) {
            this.alquiler.setEstado(rdbCancelado.getText()); // Enviamos el alquiler con su estado de Cancelados
            //storageViviendas.obtenerVivienda(this.inVi).setEstado("Disponible"); // Si el alquiler fue cancelado, entonces la vivienda estar√° disponible

        } else if (rdbVigente.isSelected()) {

            this.alquiler.setEstado(rdbVigente.getText()); // Enviamos el alquiler con su estado de vigente
            //storageViviendas.obtenerVivienda(this.inVi).setEstado("Alquilada"); // Si el alquiler fue cancelado, entonces la vivienda estar√° alquilada

        }
    }

    /**
     * M√©todo que cambia de pesta√±a de la tabla
     */
    private void cambiarPesta√±aT() {
        this.rellenarTblAlquileres();
        tbdAlquileres.setEnabledAt(0, true);
        tbdAlquileres.setSelectedIndex(0);
        tbdAlquileres.setEnabledAt(1, false);
    }

    /**
     * M√©todo que cambia de pesta√±a a editar/nuevo
     */
    private void cambiarPesta√±aEN() {
        tbdAlquileres.setEnabledAt(1, true);
        tbdAlquileres.setSelectedIndex(1);
        tbdAlquileres.setEnabledAt(0, false);
    }

    /**
     * M√©todo que permite limpiar los campos del formulario de registro de alquileres
     */
    private void limpiarCampos() {

        txtCantAdultos.setText("");
        txtCantMeses.setText("");
        txtCantNi√±os.setText("");
        txtCedulaInqui.setText("");
        txtDeposito.setText("");
        txtIDVivienda.setText("");
        txtMontoAlquiler.setText("");
        txtNumAlquiler.setText("");
        spnAumentos.setValue(1);
        btngEstadosContrado.clearSelection();
        dtpFechContrato.setDate(Date.from(Instant.now())); // Asignamos la fecha de hoy
        this.inQui = -1;
        this.inVi = -1;
    }

    /**
     * M√©todo para rellenar la tabla de los alquileres registrados
     */
    private void rellenarTblAlquileres() {

        try {
            //        storageAlquileres.verificaFecha();
//
//        this.ENCABEZADO_TABLA = new String[]{"Num. Alquiler", "Fech. Contrato", "Estado", "ID. Vivienda", "C√©dula Inquilino", "Precio Alquiler", "Dep. Garant√≠a", "Porc. Aumento Anual"};
//        this.alquiler = new Alquileres();
//        
//        this.alquileresTabla = new DefaultTableModel(null, this.ENCABEZADO_TABLA) {
//            @Override
//            public boolean isCellEditable(int rowIndex, int columnIndex) {
//                return false;
//            }
//        };
//
//        for (byte i = 0; i < storageAlquileres.getTotal(); i++) {
//
//            this.alquiler = storageAlquileres.obtenerAlquiler(i);
//
//            Object registro[] = {this.alquiler.getNumAlquiler(), this.alquiler.getFechContrato(), this.alquiler.getEstado(),
//                this.alquiler.getIdVivienda(), this.alquiler.getCedInquilino(), this.alquiler.getPrecioAlquiler(),
//                this.alquiler.getDepositoGarantia(), this.alquiler.getPorcIncremAnual() + "%"};
//
//            this.alquileresTabla.addRow(registro);
//        }
            this.alquileresTabla = operacionAl.TodoAlquileres(Enlace.crearEnlace(), "Alquileres");
            this.tblAlquileres.setModel(this.alquileresTabla);
            lblTotal.setText("Total de alquileres: " + tblAlquileres.getRowCount());

        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DlgAlquileres.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
