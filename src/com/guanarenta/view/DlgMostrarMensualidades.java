/*
 * En esta ventana se mostrarán todos los registros de las mensualidades que contengan el mes y año indicado en la vetana principal.
 */
package com.guanarenta.view;

import com.guanarenta.clases.Mensualidades;
import com.guanarenta.storage.StorageMensualidades;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sharlene Guadamuz
 * @author Carlos Mairena
 */
public class DlgMostrarMensualidades extends javax.swing.JDialog {

    private int anio;
    private int mes;
    private String ENCABEZADO_TABLA[];

    private StorageMensualidades storageMensualidades;
    private Mensualidades mensualidad;
    private DefaultTableModel mensualidadesTabla;

    /**
     * Creates new form DlgMostrarMensualidades
     *
     * @param parent
     * @param modal
     */
    public DlgMostrarMensualidades(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.storageMensualidades = new StorageMensualidades();
        this.mensualidad = null;
        this.mensualidadesTabla = null;
        this.mes = 0;
        this.anio = 0;
    }

    /**
     * Método constructor que nos permite obtener por sus parámetros el mes y año a mostrar de las mensualidades.
     *
     * @param parent
     * @param modal
     * @param storageMensualidades
     * @param mes
     * @param anio
     */
    public DlgMostrarMensualidades(java.awt.Frame parent, boolean modal, StorageMensualidades storageMensualidades, int mes, int anio) {
        super(parent, modal);
        initComponents();
        this.storageMensualidades = storageMensualidades;
        this.mensualidad = null;
        this.mensualidadesTabla = null;
        this.mes = mes;
        this.anio = anio;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBaseMostrarMensualidades = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMensualidadesMostradas = new javax.swing.JTable();
        lblBuscar = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GuanaRenta - Mostrar Mensualidades");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        pnlBaseMostrarMensualidades.setBackground(new java.awt.Color(246, 252, 254));
        pnlBaseMostrarMensualidades.setPreferredSize(new java.awt.Dimension(933, 474));

        tblMensualidadesMostradas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMensualidadesMostradas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(tblMensualidadesMostradas);

        lblBuscar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBuscar.setText("Buscar:");

        javax.swing.GroupLayout pnlBaseMostrarMensualidadesLayout = new javax.swing.GroupLayout(pnlBaseMostrarMensualidades);
        pnlBaseMostrarMensualidades.setLayout(pnlBaseMostrarMensualidadesLayout);
        pnlBaseMostrarMensualidadesLayout.setHorizontalGroup(
            pnlBaseMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBaseMostrarMensualidadesLayout.createSequentialGroup()
                .addGroup(pnlBaseMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBaseMostrarMensualidadesLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(lblBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBaseMostrarMensualidadesLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 868, Short.MAX_VALUE)))
                .addGap(33, 33, 33))
            .addGroup(pnlBaseMostrarMensualidadesLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBaseMostrarMensualidadesLayout.setVerticalGroup(
            pnlBaseMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBaseMostrarMensualidadesLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(pnlBaseMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBaseMostrarMensualidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBaseMostrarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // Actualizamos la tabla cada vez que se active la ventana
        this.rellenarTabla();
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgMostrarMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgMostrarMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgMostrarMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgMostrarMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            DlgMostrarMensualidades dialog = new DlgMostrarMensualidades(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnlBaseMostrarMensualidades;
    private javax.swing.JTable tblMensualidadesMostradas;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para rellenar la tabla con las mensualidades disponibles
     */
    private void rellenarTabla() {

        this.ENCABEZADO_TABLA = new String[]{"Consecutivo", "Núm. Alquiler", "Fech. Creación", "Inquilino", "Mes en cobro", "Año", "Descuento", "Monto a pagar", "Estado"};
        this.mensualidad = new Mensualidades();
        // Creamos el modelo restringiendo que se editen sus celdas.
        this.mensualidadesTabla = new DefaultTableModel(null, this.ENCABEZADO_TABLA) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        byte cuenta = 0;
        for (byte i = 0; i < storageMensualidades.getTotal(); i++) {

            this.mensualidad = storageMensualidades.obtenerMensualidad(i);

            if (anio == mensualidad.getAnioActual() && mes == mensualidad.getMesCobro()) {
                Object registro[] = {this.mensualidad.getConsecutivo(), this.mensualidad.getNumAlquiler(), this.mensualidad.getFechCreacion(),
                    this.mensualidad.getNomInqui(), this.mensualidad.getMesCobro(), this.mensualidad.getAnioActual(), this.mensualidad.getDescuento() + "%",
                    this.mensualidad.getMontoMes(), this.mensualidad.getEstado()};

                this.mensualidadesTabla.addRow(registro);
                cuenta++;
            }
        }
        this.tblMensualidadesMostradas.setModel(this.mensualidadesTabla);
        lblTotal.setText("Total de mensualidades de este mes: " + cuenta);
    }
}
