/*
 * Clase de tipo JDialog donde se podrá ingresar los datos de la vivienda nueva
 */
package com.guanarenta.view;

import com.guanarenta.clases.Vivienda;
import com.guanarenta.storage.StoragePropietarios;
import com.guanarenta.storage.StorageViviendas;
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sharlene Guadamuz
 * @author Carlos Mairenna
 */
public class DlgViviendas extends javax.swing.JDialog {

    StoragePropietarios storagePropietarios;
    StorageViviendas storageViviendas;

    Vivienda vivienda;
    private boolean seleCochera;
    private DefaultTableModel viviendasTabla;
    private String ENCABEZADO_TABLA[];
    private int inPro; // índice del propietario seleccionado
    private int inVi; // índice de la vivienda seleccionada

    /**
     * Creates new form dlgViviendas
     *
     * @param parent
     * @param modal
     */
    public DlgViviendas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.storagePropietarios = new StoragePropietarios();
        this.storageViviendas = new StorageViviendas();
        this.vivienda = null;
        this.seleCochera = false;
    }

    /**
     * Método constructor que permite abrir este Dialog desde el menú principal
     *
     * @param parent
     * @param modal
     * @param storagePropietarios
     * @param storageViviendas
     */
    public DlgViviendas(java.awt.Frame parent, boolean modal, StoragePropietarios storagePropietarios, StorageViviendas storageViviendas) {
        super(parent, modal);
        initComponents();
        this.storagePropietarios = storagePropietarios;
        this.storageViviendas = storageViviendas;
        this.vivienda = null;
        this.viviendasTabla = new DefaultTableModel(null, this.ENCABEZADO_TABLA);
        this.seleCochera = false;
        this.inPro = -1;
        this.inVi = -1;
    }

    /**
     * Método constructor que permite abrir este Dialog desde los alquileres
     *
     * @param parent
     * @param modal
     * @param storagePropietarios
     * @param storageViviendas
     * @param inVi
     */
    public DlgViviendas(java.awt.Frame parent, boolean modal, StoragePropietarios storagePropietarios, StorageViviendas storageViviendas, int inVi) {
        super(parent, modal);
        initComponents();
        this.storagePropietarios = storagePropietarios;
        this.storageViviendas = storageViviendas;
        this.vivienda = null;
        this.viviendasTabla = new DefaultTableModel(null, this.ENCABEZADO_TABLA);
        this.seleCochera = false;
        this.inPro = -1;
        this.inVi = inVi;
        this.tbdViviendas.setTitleAt(0, "Seleccionar");
        tblViviendas.setToolTipText("Haga doble click en una vivienda para seleccionarla");

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngCochera = new javax.swing.ButtonGroup();
        btngEstado = new javax.swing.ButtonGroup();
        btngCarretera = new javax.swing.ButtonGroup();
        tbdViviendas = new javax.swing.JTabbedPane();
        pnlViviendasDisponibles = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblViviendas = new javax.swing.JTable();
        pnlOpcionesVivienda = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnInicio = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        pnlNuevaVivienda = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        txtIdVivienda = new javax.swing.JTextField();
        lblIdViviendaTitulo = new javax.swing.JLabel();
        lblDescripcion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        lblMtsLote = new javax.swing.JLabel();
        txtMtsLote = new javax.swing.JTextField();
        lblTipoConstruccion = new javax.swing.JLabel();
        cmbTipoConstruccion = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        lblCochera = new javax.swing.JLabel();
        rdbTrue = new javax.swing.JRadioButton();
        rdbFalse = new javax.swing.JRadioButton();
        pnlCarreteras = new javax.swing.JPanel();
        lblTipoCarretera = new javax.swing.JLabel();
        rdbLastre = new javax.swing.JRadioButton();
        rdbPavimentada = new javax.swing.JRadioButton();
        rdbAdoquinada = new javax.swing.JRadioButton();
        btnGuardar = new javax.swing.JButton();
        txtCantHabitaciones = new javax.swing.JTextField();
        txtCanBanios = new javax.swing.JTextField();
        txtPrecioBase = new javax.swing.JTextField();
        lblPrecioBase = new javax.swing.JLabel();
        lblCantBanios = new javax.swing.JLabel();
        lblCantHabi = new javax.swing.JLabel();
        lblDepGarantia = new javax.swing.JLabel();
        txtDepGarantia = new javax.swing.JTextField();
        lblMtsConstruccion = new javax.swing.JLabel();
        txtMtsConstruccion = new javax.swing.JTextField();
        lblPropietario = new javax.swing.JLabel();
        btnLimpiarCampos = new javax.swing.JButton();
        btnCancelar1 = new javax.swing.JButton();
        btnSeleccionarPropietario = new javax.swing.JButton();
        txtNomPropietario = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GuanaRenta - Viviendas");
        setIconImage(null);
        setIconImages(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tbdViviendas.setToolTipText("");
        tbdViviendas.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        pnlViviendasDisponibles.setBackground(new java.awt.Color(254, 254, 254));

        tblViviendas.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        tblViviendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblViviendas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblViviendas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblViviendas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblViviendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblViviendasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblViviendas);

        pnlOpcionesVivienda.setBackground(new java.awt.Color(254, 254, 254));
        pnlOpcionesVivienda.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/add.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/delete.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/edit.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnInicio.setBackground(new java.awt.Color(225, 241, 249));
        btnInicio.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnInicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/back.png"))); // NOI18N
        btnInicio.setText("Regresar");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOpcionesViviendaLayout = new javax.swing.GroupLayout(pnlOpcionesVivienda);
        pnlOpcionesVivienda.setLayout(pnlOpcionesViviendaLayout);
        pnlOpcionesViviendaLayout.setHorizontalGroup(
            pnlOpcionesViviendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOpcionesViviendaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        pnlOpcionesViviendaLayout.setVerticalGroup(
            pnlOpcionesViviendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOpcionesViviendaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOpcionesViviendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOpcionesViviendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        lblTotal.setText("jLabel1");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Buscar ID");

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlViviendasDisponiblesLayout = new javax.swing.GroupLayout(pnlViviendasDisponibles);
        pnlViviendasDisponibles.setLayout(pnlViviendasDisponiblesLayout);
        pnlViviendasDisponiblesLayout.setHorizontalGroup(
            pnlViviendasDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlViviendasDisponiblesLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlOpcionesVivienda, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
            .addGroup(pnlViviendasDisponiblesLayout.createSequentialGroup()
                .addGroup(pnlViviendasDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlViviendasDisponiblesLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlViviendasDisponiblesLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        pnlViviendasDisponiblesLayout.setVerticalGroup(
            pnlViviendasDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViviendasDisponiblesLayout.createSequentialGroup()
                .addGroup(pnlViviendasDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlViviendasDisponiblesLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(pnlOpcionesVivienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlViviendasDisponiblesLayout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(pnlViviendasDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        tbdViviendas.addTab("Disponibles", pnlViviendasDisponibles);

        pnlNuevaVivienda.setBackground(new java.awt.Color(254, 254, 254));
        pnlNuevaVivienda.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtDescripcion.setColumns(10);
        txtDescripcion.setLineWrap(true);
        txtDescripcion.setRows(3);
        txtDescripcion.setToolTipText("");
        jScrollPane2.setViewportView(txtDescripcion);

        pnlNuevaVivienda.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 290, 80));

        txtIdVivienda.setEditable(false);
        txtIdVivienda.setFocusable(false);
        pnlNuevaVivienda.add(txtIdVivienda, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 290, -1));

        lblIdViviendaTitulo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblIdViviendaTitulo.setText("ID Vivienda");
        pnlNuevaVivienda.add(lblIdViviendaTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 160, 33));

        lblDescripcion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDescripcion.setText("Descripción");
        pnlNuevaVivienda.add(lblDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 160, 73));
        pnlNuevaVivienda.add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, 290, -1));

        lblDireccion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDireccion.setText("Dirección");
        pnlNuevaVivienda.add(lblDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 160, 32));

        lblMtsLote.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMtsLote.setText("MTS del lote");
        pnlNuevaVivienda.add(lblMtsLote, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 160, 33));

        txtMtsLote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMtsLoteKeyTyped(evt);
            }
        });
        pnlNuevaVivienda.add(txtMtsLote, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 290, -1));

        lblTipoConstruccion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTipoConstruccion.setText("Tipo de construcción");
        pnlNuevaVivienda.add(lblTipoConstruccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 150, 33));

        cmbTipoConstruccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione el material", "Block", "Baldosa", "Super block", "Madera", "Mixta" }));
        pnlNuevaVivienda.add(cmbTipoConstruccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, 290, -1));

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblCochera.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCochera.setText("Cochera");

        btngCochera.add(rdbTrue);
        rdbTrue.setText("Si");

        btngCochera.add(rdbFalse);
        rdbFalse.setText("No");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(lblCochera, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rdbFalse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rdbTrue, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(rdbFalse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdbTrue))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(lblCochera, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pnlNuevaVivienda.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 310, 280, 110));

        pnlCarreteras.setBackground(new java.awt.Color(254, 254, 254));
        pnlCarreteras.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblTipoCarretera.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTipoCarretera.setText("Tipo de Carretera");

        btngCarretera.add(rdbLastre);
        rdbLastre.setText("Lastre");

        btngCarretera.add(rdbPavimentada);
        rdbPavimentada.setText("Pavimentada");

        btngCarretera.add(rdbAdoquinada);
        rdbAdoquinada.setText("Adoquinada");

        javax.swing.GroupLayout pnlCarreterasLayout = new javax.swing.GroupLayout(pnlCarreteras);
        pnlCarreteras.setLayout(pnlCarreterasLayout);
        pnlCarreterasLayout.setHorizontalGroup(
            pnlCarreterasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCarreterasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTipoCarretera, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCarreterasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rdbAdoquinada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rdbPavimentada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rdbLastre, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );
        pnlCarreterasLayout.setVerticalGroup(
            pnlCarreterasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCarreterasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbLastre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCarreterasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTipoCarretera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rdbAdoquinada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbPavimentada)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pnlNuevaVivienda.add(pnlCarreteras, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 310, 280, 110));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/save.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setPreferredSize(new java.awt.Dimension(105, 31));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        pnlNuevaVivienda.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 440, 170, 45));

        txtCantHabitaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantHabitacionesKeyTyped(evt);
            }
        });
        pnlNuevaVivienda.add(txtCantHabitaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, 240, -1));

        txtCanBanios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCanBaniosKeyTyped(evt);
            }
        });
        pnlNuevaVivienda.add(txtCanBanios, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 70, 240, -1));

        txtPrecioBase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioBaseKeyTyped(evt);
            }
        });
        pnlNuevaVivienda.add(txtPrecioBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, 240, -1));

        lblPrecioBase.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPrecioBase.setText("Precio Base");
        pnlNuevaVivienda.add(lblPrecioBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 110, 170, 32));

        lblCantBanios.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCantBanios.setText("Cant. de baños");
        pnlNuevaVivienda.add(lblCantBanios, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 70, 170, 32));

        lblCantHabi.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCantHabi.setText("Cant. de habitaciones");
        pnlNuevaVivienda.add(lblCantHabi, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, 170, 32));

        lblDepGarantia.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDepGarantia.setText("Depósito de garantía");
        pnlNuevaVivienda.add(lblDepGarantia, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 150, 150, 32));

        txtDepGarantia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDepGarantiaKeyTyped(evt);
            }
        });
        pnlNuevaVivienda.add(txtDepGarantia, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 150, 240, -1));

        lblMtsConstruccion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMtsConstruccion.setText("MTS de la construcción");
        pnlNuevaVivienda.add(lblMtsConstruccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 190, 150, 32));

        txtMtsConstruccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMtsConstruccionKeyTyped(evt);
            }
        });
        pnlNuevaVivienda.add(txtMtsConstruccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 190, 240, -1));

        lblPropietario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPropietario.setText("Propietario");
        pnlNuevaVivienda.add(lblPropietario, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 230, 120, 32));

        btnLimpiarCampos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/clean.png"))); // NOI18N
        btnLimpiarCampos.setText("Limpiar Campos");
        btnLimpiarCampos.setToolTipText("");
        btnLimpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarCamposActionPerformed(evt);
            }
        });
        pnlNuevaVivienda.add(btnLimpiarCampos, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 440, 170, 45));

        btnCancelar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/cancelar.png"))); // NOI18N
        btnCancelar1.setText("Cancelar");
        btnCancelar1.setPreferredSize(new java.awt.Dimension(105, 31));
        btnCancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar1ActionPerformed(evt);
            }
        });
        pnlNuevaVivienda.add(btnCancelar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 440, 170, 45));

        btnSeleccionarPropietario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/guanarenta/img/buscar_propietario.png"))); // NOI18N
        btnSeleccionarPropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarPropietarioActionPerformed(evt);
            }
        });
        pnlNuevaVivienda.add(btnSeleccionarPropietario, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 230, 60, 30));

        txtNomPropietario.setEditable(false);
        pnlNuevaVivienda.add(txtNomPropietario, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 230, 170, -1));

        tbdViviendas.addTab("Añadir", null, pnlNuevaVivienda, "");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbdViviendas)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbdViviendas)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtMtsLoteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMtsLoteKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMtsLoteKeyTyped

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Botón que agrega los datos que se ingresaron en la ventana

        if (this.verificarDatos()) {

            try {
                this.vivienda = new Vivienda();

                vivienda.setCantBanios(Float.parseFloat(txtCanBanios.getText()));
                vivienda.setCantHabitac(Short.parseShort(txtCantHabitaciones.getText()));
                vivienda.setCarretera(this.obtenerCarretera());
                vivienda.setCochera(this.tieneCochera());
                vivienda.setDepositoGarantia(Integer.parseInt(txtDepGarantia.getText()));
                vivienda.setDescripcion(txtDescripcion.getText());
                vivienda.setDireccion(txtDireccion.getText());
                vivienda.setMtsConstruccion(Float.parseFloat(txtMtsConstruccion.getText()));
                vivienda.setMtsLote(Float.parseFloat(txtMtsLote.getText()));
                vivienda.setPrecioBase(Integer.parseInt(txtPrecioBase.getText()));
                vivienda.setTipoConstruccion(this.obtenerTipoConstruccion());

                // Reemplazamos por la tabla ya lista de propietarios
                vivienda.setPropietario(this.storagePropietarios.obtenerPropietario(this.inPro));
                if (tbdViviendas.getTitleAt(1).equals("Añadir")) {
                    vivienda.setIdVivienda(storageViviendas.crearIdVivienda());
                    // Si el título dice añadir, entonces guardamos a la vivienda
                    if (!storageViviendas.guardaVivienda(vivienda)) {
                        JOptionPane.showMessageDialog(this, "No se ha podido guardar el usuario");
                    }
                } else {
                    // Si la pestaña tiene el título de editar
                    vivienda.setIdVivienda(Integer.parseInt(txtIdVivienda.getText()));
                    int index = tblViviendas.getSelectedRow();
                    storageViviendas.editarVivienda(index, vivienda);
                }

                this.rellenarTabla();
                this.cambiarPestañaT();
                this.limpiarCampos();

            } catch (NumberFormatException esc) {

                System.out.println(esc.getMessage());
                JOptionPane.showMessageDialog(this, "Ingrese correctamente los datos");

            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this, "Seleccione un propietario");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Asegúrese de rellenar todos los campos y seleccionar todas las opciones...");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtCantHabitacionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantHabitacionesKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantHabitacionesKeyTyped

    private void txtCanBaniosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCanBaniosKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCanBaniosKeyTyped

    private void txtPrecioBaseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioBaseKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioBaseKeyTyped

    private void txtDepGarantiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDepGarantiaKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDepGarantiaKeyTyped

    private void txtMtsConstruccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMtsConstruccionKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMtsConstruccionKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Al momento de que la ventana se abra
        tbdViviendas.setEnabledAt(1, false);
        this.rellenarTabla();
    }//GEN-LAST:event_formWindowOpened

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // Al momento de que den al botón de nuevo
        tbdViviendas.setTitleAt(1, "Añadir");
        txtIdVivienda.setText(Integer.toString(storageViviendas.getIdVivienda() + 1));
        this.cambiarPestañaEN();

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Botón que llama al método que elimina una vivienda enviándole un índice
        try {

            int index = tblViviendas.getSelectedRow();
            this.storageViviendas.borrarVivienda(index);
            this.rellenarTabla();

        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Por favor asegúrese de seleccionar una vivienda");
            System.out.println(ex.getCause());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // Botón que obtiene los datos de la ventana
        try {
            this.limpiarCampos();
            tbdViviendas.setTitleAt(1, "Editar");

            int index = tblViviendas.getSelectedRow();
            this.vivienda = new Vivienda();

            // Obtenemos los datos de la vivienda seleccionada
            this.vivienda = this.storageViviendas.obtenerVivienda(index);

            txtIdVivienda.setText(Integer.toString(this.vivienda.getIdVivienda()));
            txtCanBanios.setText(Float.toString(this.vivienda.getCantBanios()));
            txtCantHabitaciones.setText(Integer.toString(this.vivienda.getCantHabitac()));
            txtDepGarantia.setText(Integer.toString(this.vivienda.getDepositoGarantia()));
            txtDescripcion.setText(this.vivienda.getDescripcion());
            txtDireccion.setText(this.vivienda.getDireccion());
            txtMtsConstruccion.setText(Float.toString(this.vivienda.getMtsConstruccion()));
            txtMtsLote.setText(Float.toString(this.vivienda.getMtsLote()));
            txtPrecioBase.setText(Integer.toString(this.vivienda.getPrecioBase()));
            txtNomPropietario.setText(this.vivienda.getPropietario().getNombre());

            // Para el propietario, podemos contener una variable que reciba el índice, así nada más se selecciona la tabla...
            cmbTipoConstruccion.setSelectedItem(this.vivienda.getTipoConstruccion());
            this.rdbs();

            tbdViviendas.setTitleAt(1, "Editar");
            this.cambiarPestañaEN();

        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Por favor asegúrese de seleccionar un propietario");
            System.out.println(ex.getCause());
        }

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnLimpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarCamposActionPerformed
        // Botón que permite limpiar los campos
        this.limpiarCampos();
    }//GEN-LAST:event_btnLimpiarCamposActionPerformed

    private void btnCancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar1ActionPerformed
        // Cambia a la pestaña de la tabla
        this.limpiarCampos();
        this.cambiarPestañaT();
    }//GEN-LAST:event_btnCancelar1ActionPerformed

    private void btnSeleccionarPropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarPropietarioActionPerformed
        // Botón que permite abrir la ventana de los propietarios
        // La idea es que obtengamos el índice de la tabla seleccionada en esa ventana, esto sucederá cuando la persona de doble click
        try {
            DlgPropietarios propietaW = new DlgPropietarios(null, true, this.storagePropietarios, inPro);
            propietaW.setVisible(true);
            this.inPro = propietaW.getInPro();
            // Obtenemos el nombre del propietario y lo seleccionamos
            txtNomPropietario.setText(storagePropietarios.obtenerPropietario(inPro).getNombre());
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getCause());
            JOptionPane.showMessageDialog(this, "No ha seleccionado nigún propietario.");
        }

    }//GEN-LAST:event_btnSeleccionarPropietarioActionPerformed

    private void tblViviendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblViviendasMouseClicked
        // Si el título de la pestaña dice "Selecciona" y la cantidad de clicks es de 2, entonces obtiene el índice y cierra la ventana
        if (evt.getClickCount() == 2 && tbdViviendas.getTitleAt(0).equals("Seleccionar")) {
            this.inVi = tblViviendas.getSelectedRow();
            System.out.println("Se ha seleccionado el ID: " + storageViviendas.obtenerVivienda(inVi).getIdVivienda());
            this.dispose();
        }

    }//GEN-LAST:event_tblViviendasMouseClicked

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        // Cerramos la ventana
        this.dispose();
    }//GEN-LAST:event_btnInicioActionPerformed

    private void txtBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyTyped
        // TODO add your handling code here:

        this.ENCABEZADO_TABLA = new String[]{"ID Vivienda", "Propietario", "Precio Base", "Dep. Garantía", "Estado", "Cochera", "Tamaño Vivienda"};
        String cochera = "No"; // Por defecto las viviendas no tienen cochera
        //  Creamos el modelo restringiendo que se editen sus celdas.
        this.viviendasTabla = new DefaultTableModel(null, this.ENCABEZADO_TABLA) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        if (txtBuscar.getText().length() == 0) {

            this.rellenarTabla();

        } else {
            for (byte i = 0; i < storageViviendas.getTotal(); i++) {

                this.vivienda = storageViviendas.obtenerVivienda(i);
                if (Integer.toString(vivienda.getIdVivienda()).regionMatches(true, 0, txtBuscar.getText(), 0, txtBuscar.getText().length())) {

                    Object registro[] = {this.vivienda.getIdVivienda(), this.vivienda.getPropietario().getNombre(),
                        this.vivienda.getPrecioBase(), this.vivienda.getDepositoGarantia(), this.vivienda.getEstado(),
                        cochera, this.vivienda.getMtsConstruccion()};

                    this.viviendasTabla.addRow(registro);

                }
            }
        }
    }//GEN-LAST:event_txtBuscarKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgViviendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgViviendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgViviendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgViviendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgViviendas dialog = new DlgViviendas(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar1;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnInicio;
    private javax.swing.JButton btnLimpiarCampos;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSeleccionarPropietario;
    private javax.swing.ButtonGroup btngCarretera;
    private javax.swing.ButtonGroup btngCochera;
    private javax.swing.ButtonGroup btngEstado;
    private javax.swing.JComboBox<String> cmbTipoConstruccion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCantBanios;
    private javax.swing.JLabel lblCantHabi;
    private javax.swing.JLabel lblCochera;
    private javax.swing.JLabel lblDepGarantia;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblIdViviendaTitulo;
    private javax.swing.JLabel lblMtsConstruccion;
    private javax.swing.JLabel lblMtsLote;
    private javax.swing.JLabel lblPrecioBase;
    private javax.swing.JLabel lblPropietario;
    private javax.swing.JLabel lblTipoCarretera;
    private javax.swing.JLabel lblTipoConstruccion;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnlCarreteras;
    private javax.swing.JPanel pnlNuevaVivienda;
    private javax.swing.JPanel pnlOpcionesVivienda;
    private javax.swing.JPanel pnlViviendasDisponibles;
    private javax.swing.JRadioButton rdbAdoquinada;
    private javax.swing.JRadioButton rdbFalse;
    private javax.swing.JRadioButton rdbLastre;
    private javax.swing.JRadioButton rdbPavimentada;
    private javax.swing.JRadioButton rdbTrue;
    private javax.swing.JTabbedPane tbdViviendas;
    private javax.swing.JTable tblViviendas;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCanBanios;
    private javax.swing.JTextField txtCantHabitaciones;
    private javax.swing.JTextField txtDepGarantia;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtIdVivienda;
    private javax.swing.JTextField txtMtsConstruccion;
    private javax.swing.JTextField txtMtsLote;
    private javax.swing.JTextField txtNomPropietario;
    private javax.swing.JTextField txtPrecioBase;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Método que vuelve al lugar de selección de los RadioButtons
     */
    private void rdbs() {

        /**
         * Instrucciones que selecciona los RadioButtons de la carretera
         */
        switch (vivienda.getCarretera()) {
            case "Lastre":
                rdbLastre.setSelected(true);
                break;
            case "Pavimentada":
                rdbPavimentada.setSelected(true);
                break;
            default:
                rdbAdoquinada.setSelected(true);
                break;
        }

        /**
         * Instrucciones que selecciona los RadioButtons de la cochera
         */
        if (vivienda.getCochera() == true) {
            rdbTrue.setSelected(true);
        } else {
            rdbFalse.setSelected(true);
        }

    }

    /**
     * Método que cambia la pestaña a la que está la tabla
     */
    private void cambiarPestañaT() {

        tbdViviendas.setEnabledAt(0, true);
        tbdViviendas.setSelectedIndex(0);
        tbdViviendas.setEnabledAt(1, false);
    }

    /**
     * Método que cambia de pestaña a editar/nuevo
     */
    private void cambiarPestañaEN() {
        tbdViviendas.setEnabledAt(1, true);
        tbdViviendas.setSelectedIndex(1);
        tbdViviendas.setEnabledAt(0, false);
    }

    /**
     * Método para comprobar si se ha ingresado todos los datos
     */
    private boolean verificarDatos() {

        this.tieneCochera();

        if (txtCanBanios.getText().isEmpty()) {
            txtCanBanios.setBorder(new LineBorder(Color.RED));
        }
        if (txtCantHabitaciones.getText().isEmpty()) {
            txtCantHabitaciones.setBorder(new LineBorder(Color.RED));
        }
        if (txtDepGarantia.getText().isEmpty()) {
            txtDepGarantia.setBorder(new LineBorder(Color.RED));
        }
        if (txtDescripcion.getText().isEmpty()) {
            txtDescripcion.setBorder(new LineBorder(Color.RED));
        }
        if (txtDireccion.getText().isEmpty()) {
            txtDireccion.setBorder(new LineBorder(Color.RED));
        }
        if (txtMtsConstruccion.getText().isEmpty()) {
            txtMtsConstruccion.setBorder(new LineBorder(Color.RED));
        }
        if (txtMtsLote.getText().isEmpty()) {
            txtMtsLote.setBorder(new LineBorder(Color.RED));
        }
        if (txtPrecioBase.getText().isEmpty()) {
            txtPrecioBase.setBorder(new LineBorder(Color.RED));
        }

        if ((cmbTipoConstruccion.getSelectedIndex() != 0) && !txtCanBanios.getText().isEmpty() && !txtCantHabitaciones.getText().isEmpty() && !txtDepGarantia.getText().isEmpty()
                && !txtDescripcion.getText().isEmpty() && !txtMtsConstruccion.getText().isEmpty() && !txtMtsLote.getText().isEmpty()
                && !txtPrecioBase.getText().isEmpty() && !this.obtenerCarretera().isEmpty() && this.seleCochera) {

            return true;
        } else {
            return false;
        }
    }

    /**
     * Método retorna el tipo de carretera
     */
    private String obtenerCarretera() {

        if (rdbLastre.isSelected()) {
            return rdbLastre.getText();

        } else if (rdbAdoquinada.isSelected()) {
            return rdbAdoquinada.getText();

        } else if (rdbPavimentada.isSelected()) {
            return rdbPavimentada.getText();

        } else {
            //JOptionPane.showMessageDialog(this, "Por favor seleccione el tipo de carretera");
            return "";
        }
    }

    /**
     * Método que retorna el valor de la cochera
     */
    private boolean tieneCochera() {

        if (rdbTrue.isSelected()) {
            this.seleCochera = true;
            return true;

        } else if (rdbFalse.isSelected()) {
            this.seleCochera = true;
            return false;

        } else {

            //JOptionPane.showMessageDialog(this, "Por favor seleccione si tiene o no cochera");
            this.seleCochera = false;
            return false;
        }
    }

    /**
     * Método que retorna el valor del tipo de construcción
     */
    private String obtenerTipoConstruccion() {
        if (cmbTipoConstruccion.getSelectedIndex() != 0) {
            return cmbTipoConstruccion.getItemAt(cmbTipoConstruccion.getSelectedIndex());

        } else {
            JOptionPane.showMessageDialog(this, "Por favor eliga el tipo de construcción de la vivienda");
            return "";
        }

    }

    /**
     * Método para rellenar la tabla
     */
    private void rellenarTabla() {

        this.ENCABEZADO_TABLA = new String[]{"ID Vivienda", "Propietario", "Precio Base", "Dep. Garantía", "Estado", "Cochera", "Tamaño Vivienda"};
        String cochera = "No"; // Por defecto las viviendas no tienen cochera
        //  Creamos el modelo restringiendo que se editen sus celdas.
        this.viviendasTabla = new DefaultTableModel(null, this.ENCABEZADO_TABLA) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        if (tbdViviendas.getTitleAt(0).equals("Seleccionar")) { // Si dice seleccionar, entonces muestra las viviendas con estado disponible

            for (byte i = 0; i < storageViviendas.getTotal(); i++) {

                this.vivienda = storageViviendas.obtenerVivienda(i);
                if (vivienda.getCochera()) { // Si tiene cochera
                    cochera = "Si";
                }

                if (vivienda.getEstado().equals("Disponible")) {
                    Object registro[] = {this.vivienda.getIdVivienda(), this.vivienda.getPropietario().getNombre(),
                        this.vivienda.getPrecioBase(), this.vivienda.getDepositoGarantia(), this.vivienda.getEstado(),
                        cochera, this.vivienda.getMtsConstruccion()};

                    this.viviendasTabla.addRow(registro);
                }
            }
        } else { // Si no es para selecccionar, entonces agregamos a la tabla todas
            for (byte i = 0; i < storageViviendas.getTotal(); i++) {

                this.vivienda = storageViviendas.obtenerVivienda(i);
                if (vivienda.getCochera()) {
                    cochera = "Si";
                }

                Object registro[] = {this.vivienda.getIdVivienda(), this.vivienda.getPropietario().getNombre(),
                    this.vivienda.getPrecioBase(), this.vivienda.getDepositoGarantia(), this.vivienda.getEstado(),
                    cochera, this.vivienda.getMtsConstruccion()};

                this.viviendasTabla.addRow(registro);
            }
        }
        this.tblViviendas.setModel(this.viviendasTabla);
        lblTotal.setText("Total de viviendas: " + storageViviendas.getTotal());
    }

    /**
     * Método para limpiar los campos
     */
    private void limpiarCampos() {

        txtCanBanios.setText("");
        txtCantHabitaciones.setText("");
        txtDepGarantia.setText("");
        txtDescripcion.setText("");
        txtDireccion.setText("");
        txtMtsConstruccion.setText("");
        txtMtsLote.setText("");
        txtPrecioBase.setText("");
        txtNomPropietario.setText("");

        btngCochera.clearSelection();
        btngEstado.clearSelection();
        btngCarretera.clearSelection();
        cmbTipoConstruccion.setSelectedIndex(0);
    }
    
    public int getInVi() {
        return inVi;
    }

    public void setInVi(int inVi) {
        this.inVi = inVi;
    }
}
