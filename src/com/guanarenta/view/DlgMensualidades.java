/*
 * Clase de tipo Dialog que permite proporcionar las opciones para administrar las mensualidades.
 * 1 mensualidad por alquiler registrado.
 */
package com.guanarenta.view;

import com.guanarenta.clases.Mensualidades;
import com.guanarenta.storage.StorageAlquileres;
import com.guanarenta.storage.StorageInquilinos;
import com.guanarenta.storage.StorageMensualidades;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sharlene Guadamuz
 * @author Carlos Mairena
 */
public class DlgMensualidades extends javax.swing.JDialog {

    StorageMensualidades storageMensualidades;
    StorageAlquileres storageAlquileres;
    StorageInquilinos storageInquilinos;

    Mensualidades mensualidad;
    private String ENCABEZADO_TABLA[];
    private DefaultTableModel mensualidadesTabla;

    /**
     * Creates new form DlgMensualidades
     *
     * @param parent
     * @param modal
     */
    public DlgMensualidades(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.storageMensualidades = new StorageMensualidades();
        this.mensualidad = new Mensualidades();
    }

    /**
     * Método consructor que nos permite crear la ventana de Mensualidades
     *
     * @param parent
     * @param modal
     * @param storageMensualidades
     * @param storageAlquileres
     * @param storageInquilinos
     */
    public DlgMensualidades(java.awt.Frame parent, boolean modal, StorageMensualidades storageMensualidades, StorageAlquileres storageAlquileres, StorageInquilinos storageInquilinos) {
        super(parent, modal);
        initComponents();
        this.storageMensualidades = storageMensualidades;
        this.storageAlquileres = storageAlquileres;
        this.storageInquilinos = storageInquilinos;
        this.mensualidad = null;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBaseMensualidades = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMensualidades = new javax.swing.JTable();
        lblFiltrar = new javax.swing.JLabel();
        chkInquilino = new javax.swing.JCheckBox();
        chkMes = new javax.swing.JCheckBox();
        chkAnio = new javax.swing.JCheckBox();
        txtFiltrarInqui = new javax.swing.JTextField();
        pnlGenerarMensualidades = new javax.swing.JPanel();
        lblFechaActual = new javax.swing.JLabel();
        txtFechaActual = new javax.swing.JTextField();
        lblMesMensualidad = new javax.swing.JLabel();
        cmbMeses = new javax.swing.JComboBox<>();
        lblAnioMensualidad = new javax.swing.JLabel();
        txtAnio = new javax.swing.JTextField();
        btnGenerarMensualidades = new javax.swing.JButton();
        btnCancelarMensualidades = new javax.swing.JButton();
        pnlMostrarMensualidades = new javax.swing.JPanel();
        lblMes = new javax.swing.JLabel();
        txtAnioMostrar = new javax.swing.JTextField();
        lblAnio = new javax.swing.JLabel();
        cmbMesesMostrar = new javax.swing.JComboBox<>();
        btnMostrarMEnsualidad = new javax.swing.JButton();
        txtFiltrarAnio = new javax.swing.JTextField();
        txtFiltrarMes = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GuanaRenta - Mensualidades");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        pnlBaseMensualidades.setBackground(new java.awt.Color(254, 254, 254));
        pnlBaseMensualidades.setBorder(null);

        tblMensualidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblMensualidades);

        lblFiltrar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFiltrar.setText("Filtar por:");

        chkInquilino.setText("Inquilino");

        chkMes.setText("Mes");

        chkAnio.setText("Año");

        txtFiltrarInqui.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFiltrarInquiKeyPressed(evt);
            }
        });

        pnlGenerarMensualidades.setBackground(new java.awt.Color(254, 254, 254));
        pnlGenerarMensualidades.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Generar Mensualidades"));
        pnlGenerarMensualidades.setPreferredSize(new java.awt.Dimension(293, 249));

        lblFechaActual.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFechaActual.setText("Fecha actual");

        txtFechaActual.setEditable(false);

        lblMesMensualidad.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMesMensualidad.setText("Mes");

        cmbMeses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        lblAnioMensualidad.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAnioMensualidad.setText("Año");

        txtAnio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnioKeyTyped(evt);
            }
        });

        btnGenerarMensualidades.setText("Generar");
        btnGenerarMensualidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarMensualidadesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlGenerarMensualidadesLayout = new javax.swing.GroupLayout(pnlGenerarMensualidades);
        pnlGenerarMensualidades.setLayout(pnlGenerarMensualidadesLayout);
        pnlGenerarMensualidadesLayout.setHorizontalGroup(
            pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerarMensualidadesLayout.createSequentialGroup()
                .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGenerarMensualidadesLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(btnGenerarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlGenerarMensualidadesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblMesMensualidad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblFechaActual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAnioMensualidad, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFechaActual)
                            .addComponent(cmbMeses, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        pnlGenerarMensualidadesLayout.setVerticalGroup(
            pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerarMensualidadesLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbMeses, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMesMensualidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAnioMensualidad, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnGenerarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnCancelarMensualidades.setText("Cancelar Mensualidad");
        btnCancelarMensualidades.setPreferredSize(new java.awt.Dimension(61, 31));
        btnCancelarMensualidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarMensualidadesActionPerformed(evt);
            }
        });

        pnlMostrarMensualidades.setBackground(new java.awt.Color(254, 254, 254));
        pnlMostrarMensualidades.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Mostrar mensualidades"));

        lblMes.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMes.setText("Mes");

        txtAnioMostrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnioMostrarKeyTyped(evt);
            }
        });

        lblAnio.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAnio.setText("Año");

        cmbMesesMostrar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        btnMostrarMEnsualidad.setText("Mostrar");
        btnMostrarMEnsualidad.setPreferredSize(new java.awt.Dimension(61, 31));
        btnMostrarMEnsualidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarMEnsualidadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMostrarMensualidadesLayout = new javax.swing.GroupLayout(pnlMostrarMensualidades);
        pnlMostrarMensualidades.setLayout(pnlMostrarMensualidadesLayout);
        pnlMostrarMensualidadesLayout.setHorizontalGroup(
            pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMostrarMensualidadesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMostrarMEnsualidad, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
            .addGroup(pnlMostrarMensualidadesLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbMesesMostrar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtAnioMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        pnlMostrarMensualidadesLayout.setVerticalGroup(
            pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMostrarMensualidadesLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMes, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMesesMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnlMostrarMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAnioMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnMostrarMEnsualidad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        txtFiltrarAnio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltrarAnioKeyReleased(evt);
            }
        });

        txtFiltrarMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltrarMesKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlBaseMensualidadesLayout = new javax.swing.GroupLayout(pnlBaseMensualidades);
        pnlBaseMensualidades.setLayout(pnlBaseMensualidadesLayout);
        pnlBaseMensualidadesLayout.setHorizontalGroup(
            pnlBaseMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBaseMensualidadesLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1)
                .addGap(33, 33, 33))
            .addGroup(pnlBaseMensualidadesLayout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addComponent(lblFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chkInquilino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFiltrarInqui, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkMes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFiltrarMes, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chkAnio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFiltrarAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnCancelarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
            .addGroup(pnlBaseMensualidadesLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(pnlGenerarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128)
                .addComponent(pnlMostrarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlBaseMensualidadesLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBaseMensualidadesLayout.setVerticalGroup(
            pnlBaseMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBaseMensualidadesLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnlBaseMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlGenerarMensualidades, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(pnlMostrarMensualidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(pnlBaseMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelarMensualidades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBaseMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlBaseMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFiltrarAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlBaseMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkInquilino, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFiltrarInqui, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlBaseMensualidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkMes, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFiltrarMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBaseMensualidades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlBaseMensualidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // Cada vez que se active la ventana
        this.obtenerFecha();
        this.rellenarTabla();
    }//GEN-LAST:event_formWindowActivated

    private void btnGenerarMensualidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarMensualidadesActionPerformed
        // Este botón contiene los métodos para generar las mensualidades de los alquileres vigentes
        if (!txtAnio.getText().isEmpty() && cmbMeses.getSelectedIndex() != 0) {
            for (int i = 0; i < storageAlquileres.getTotal(); i++) {
                this.iniMensualidad(i);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Digite el año y el mes.");
        }

    }//GEN-LAST:event_btnGenerarMensualidadesActionPerformed

    private void btnMostrarMEnsualidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarMEnsualidadActionPerformed
        // Botón que permite mostrar las mensualidades con el mes y año indicado en una nueva ventana.
        if (!txtAnioMostrar.getText().isEmpty() && cmbMesesMostrar.getSelectedIndex() != 0) {
            DlgMostrarMensualidades mostrarMensW = new DlgMostrarMensualidades(null, true, storageMensualidades, cmbMesesMostrar.getSelectedIndex(), Integer.parseInt(txtAnioMostrar.getText()));
            mostrarMensW.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Digite el año y el mes.");
        }
    }//GEN-LAST:event_btnMostrarMEnsualidadActionPerformed

    private void btnCancelarMensualidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarMensualidadesActionPerformed
        // Botón que permite cambiar al estado de cancelado las mensualidades
        // Aplicamos la mensualidad como cancelada de esta forma para mientras reparamos el filtro de búsqueda.
        try {
            int i = tblMensualidades.getSelectedRow();
            int option = JOptionPane.showConfirmDialog(this, "¿Desea cancelar la mensualidad " + storageMensualidades.obtenerMensualidad(i).getConsecutivo() + "?", "Cancelar mensualidad", JOptionPane.YES_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                this.storageMensualidades.obtenerMensualidad(i).setEstado("Cancelada");
                this.rellenarTabla();
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getCause());
            JOptionPane.showMessageDialog(this, "Por favor seleccione una mensualidad en la tabla.");
        }
    }//GEN-LAST:event_btnCancelarMensualidadesActionPerformed

    private void txtAnioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnioKeyTyped
        // Evitamos de que se esté ingresando más de 4 dígitos y letras
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }

        if (txtAnio.getText().length() == 4) {
            evt.consume();
        }

    }//GEN-LAST:event_txtAnioKeyTyped

    private void txtAnioMostrarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnioMostrarKeyTyped
        // Solo acepta numeros
        char tecla;
        tecla = evt.getKeyChar();
        if (!Character.isDigit(tecla) && tecla != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }

        if (txtAnio.getText().length() == 4) {
            evt.consume();
        }
    }//GEN-LAST:event_txtAnioMostrarKeyTyped

    private void txtFiltrarInquiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltrarInquiKeyPressed
        // TODO add your handling code here:
//        this.filtrarPorNombre();
    }//GEN-LAST:event_txtFiltrarInquiKeyPressed

    private void txtFiltrarMesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltrarMesKeyReleased
        // TODO add your handling code here:
//        this.filtrarPorMes();
    }//GEN-LAST:event_txtFiltrarMesKeyReleased

    private void txtFiltrarAnioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltrarAnioKeyReleased
        // TODO add your handling code here:
//        this.filtrarporAnio();
    }//GEN-LAST:event_txtFiltrarAnioKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgMensualidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            DlgMensualidades dialog = new DlgMensualidades(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarMensualidades;
    private javax.swing.JButton btnGenerarMensualidades;
    private javax.swing.JButton btnMostrarMEnsualidad;
    private javax.swing.JCheckBox chkAnio;
    private javax.swing.JCheckBox chkInquilino;
    private javax.swing.JCheckBox chkMes;
    private javax.swing.JComboBox<String> cmbMeses;
    private javax.swing.JComboBox<String> cmbMesesMostrar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnio;
    private javax.swing.JLabel lblAnioMensualidad;
    private javax.swing.JLabel lblFechaActual;
    private javax.swing.JLabel lblFiltrar;
    private javax.swing.JLabel lblMes;
    private javax.swing.JLabel lblMesMensualidad;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnlBaseMensualidades;
    private javax.swing.JPanel pnlGenerarMensualidades;
    private javax.swing.JPanel pnlMostrarMensualidades;
    private javax.swing.JTable tblMensualidades;
    private javax.swing.JTextField txtAnio;
    private javax.swing.JTextField txtAnioMostrar;
    private javax.swing.JTextField txtFechaActual;
    private javax.swing.JTextField txtFiltrarAnio;
    private javax.swing.JTextField txtFiltrarInqui;
    private javax.swing.JTextField txtFiltrarMes;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que empieza a inicar los datos de una mensualidad
     */
    private void iniMensualidad(int i) {

        boolean ap = false; // Para comprobar la existencia de una mensualidad de un alquiler con el mismo mes y año seleccionado
        if (storageAlquileres.obtenerAlquiler(i).getEstado().equals("Vigente")) { // Si el estado del alquiler es vigente
            this.mensualidad = new Mensualidades();

            this.mensualidad.setAnioActual(Short.parseShort(txtAnio.getText())); // Debemos restringir las letras y la cantidad de dígitos
            this.mensualidad.setMesCobro(cmbMeses.getSelectedIndex()); // Valores del 1 al 12 para cada mes
            this.mensualidad.setNumAlquiler(storageAlquileres.obtenerAlquiler(i).getNumAlquiler()); // Aqui va el número del alquiler

            if (storageMensualidades.getTotal() == 0) {
                this.guardarMen(i);

            } else {
                // Recorremos en las mensualidades registradas si este número de alquiler tiene el mismo mes y año seleccionado
                for (int in = 0; in < storageMensualidades.getTotal(); in++) { // Recorremos cada nodo de las mensualidades

                    // Si el número de alquiler es igual al obtenido en alguno del nodo de mensualidades
                    if (mensualidad.getNumAlquiler() == storageMensualidades.obtenerMensualidad(in).getNumAlquiler()
                            && mensualidad.getMesCobro() == storageMensualidades.obtenerMensualidad(in).getMesCobro()
                            && mensualidad.getAnioActual() == storageMensualidades.obtenerMensualidad(in).getAnioActual()) {
                        ap = true; // Existencia de una mensualidad con el mismo mes y año seleccionado
                        break; // Rompemos el ciclo
                    }
                }
                if (ap == false) { // Si la existencia de un año y mes es falso, entonces guardamos la mensualidad
                    this.guardarMen(i);

                } else { // Mensaje de monitoreo
                    System.out.println("Ya hay una mensualidad con esta fecha: " + storageAlquileres.obtenerAlquiler(i).getNumAlquiler());
                }
            }
            this.rellenarTabla();

        } else { // Mensaje de monitoreo
            System.out.println("No se crea mensualidad al alquiler: " + storageAlquileres.obtenerAlquiler(i).getNumAlquiler());
        }
    }

    /**
     * Método que permite guardar los datos después de comprobar
     */
    private void guardarMen(int i) {

        this.calcularMontoDescuento(i); // calculamos el monto y descuento
        this.mensualidad.setFechCreacion(new Date()); // Obtenemos la fecha actual del equipo

        // Por medio del número de alquiler, podemos obtener la cédula del inquilino para luego buscar el nombre
        this.mensualidad.setNomInqui(this.nomInquilino()); // Aquí irá el  nombre del inquilino

        this.mensualidad.setEstado("Pendiente"); // Por defecto el estado de la mensualidad será pendiente
        this.mensualidad.setConsecutivo(storageMensualidades.crearConsecutivo()); // Se genera automáticamente. PERO DESPUÉS DE COMPROBAR DE QUE SE PUEDE GUARDAR LA MENSUALIDAD
        storageMensualidades.GuardarMensualidad(this.mensualidad);
    }

    /**
     * Método que nos permite obtener el nombre del inquilino al que se le asignó el alquiler
     */
    private String nomInquilino() {

        String nombre = null;

        for (int i = 0; i < storageAlquileres.getTotal(); i++) { // Buscamos en la lista de los alquileres el número de alquiler actual a generar la mensualidad

            if (mensualidad.getNumAlquiler() == storageAlquileres.obtenerAlquiler(i).getNumAlquiler()) { // Si encontramos el número de alquiler

                // Ahora obtenemos la cédula del inquilino que está en ese alquiler
                long cedInqui = storageAlquileres.obtenerAlquiler(i).getCedInquilino();

                // Buscamos en la lista de los inquilinos, al inquilino que contiene la cédula que obtuvimos por medio del alquiler
                for (int in = 0; in < storageInquilinos.getTotal(); in++) {

                    if (cedInqui == storageInquilinos.obtenerInquilino(in).getCedInqui()) {
                        nombre = storageInquilinos.obtenerInquilino(in).getNomInqui();
                        break; // Rompemos el ciclo
                    }
                }
                break; // Rompemos el ciclo
            }

        }
        return nombre;
    }

    /**
     * Método que calcula el monto del mes, y aplica el descuento según la temporada
     */
    private void calcularMontoDescuento(int i) {

        if ((cmbMeses.getSelectedIndex() == 1) || (cmbMeses.getSelectedIndex() == 2)
                || (cmbMeses.getSelectedIndex() == 11) || (cmbMeses.getSelectedIndex() == 12)) {
            this.tempAlta(i);
        } else if ((cmbMeses.getSelectedIndex() == 3) || (cmbMeses.getSelectedIndex() == 4) || (cmbMeses.getSelectedIndex() == 5)
                || (cmbMeses.getSelectedIndex() == 6) || (cmbMeses.getSelectedIndex() == 7)) {
            this.tempMedia(i);
        } else {
            tempBaja(i);
        }

    }

    /**
     * Método que hace el cálculo del monto y descuento en la temporada baja
     */
    private void tempBaja(int i) {
        double monto = storageAlquileres.obtenerAlquiler(i).getPrecioAlquiler();
        float descuento = (float) 0.1;

        monto = (float) (monto - (descuento * monto));
        this.mensualidad.setMontoMes((float) monto); // Aquí irá el monto del mes
        this.mensualidad.setDescuento((int) (descuento * 100)); // Aquí obtenemos el descuento aplicado dependiendo de la temporada
        System.out.println("Descuento de: " + (descuento * 100));
        System.out.println("Total del monto a pagar: " + monto);
    }

    /**
     * Método que hace el cálculo del monto y descuento en la temporada media
     */
    private void tempMedia(int i) {
        double monto = storageAlquileres.obtenerAlquiler(i).getPrecioAlquiler();
        double descuento = (float) 0.05;

        monto = (monto - (descuento * monto));
        this.mensualidad.setMontoMes((float) monto); // Aquí irá el monto del mes
        this.mensualidad.setDescuento((int) (descuento * 100)); // Aquí obtenemos el descuento aplicado dependiendo de la temporada
        System.out.println("Descuento de: " + (descuento * 100));
        System.out.println("Total del monto a pagar: " + monto);
    }

    /**
     * Método que hace el cálculo del monto y descuento en la temporada alta
     */
    private void tempAlta(int i) {
        double monto = storageAlquileres.obtenerAlquiler(i).getPrecioAlquiler();
        float descuento = 0;

        this.mensualidad.setMontoMes((float) monto); // Aquí irá el monto del mes
        this.mensualidad.setDescuento((int) (descuento * 100)); // Aquí obtenemos el descuento aplicado dependiendo de la temporada
        System.out.println("No aplica descuento en la temporada alta");
        System.out.println("Total del monto a pagar: " + monto);
    }

    /**
     * Método para rellenar la tabla con las mensualidades disponibles
     */
    private void rellenarTabla() {

        this.ENCABEZADO_TABLA = new String[]{"Consecutivo", "Núm. Alquiler", "Fech. Creación", "Inquilino", "Mes en cobro", "Año", "Descuento", "Monto a pagar", "Estado"};
        this.mensualidad = new Mensualidades();
        // Creamos el modelo restringiendo que se editen sus celdas.
        this.mensualidadesTabla = new DefaultTableModel(null, this.ENCABEZADO_TABLA) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        for (byte i = 0; i < storageMensualidades.getTotal(); i++) {

            this.mensualidad = storageMensualidades.obtenerMensualidad(i);

            Object registro[] = {this.mensualidad.getConsecutivo(), this.mensualidad.getNumAlquiler(), this.mensualidad.getFechCreacion(),
                this.mensualidad.getNomInqui(), this.mensualidad.getMesCobro(), this.mensualidad.getAnioActual(), this.mensualidad.getDescuento() + "%",
                this.mensualidad.getMontoMes(), this.mensualidad.getEstado()};

            this.mensualidadesTabla.addRow(registro);

        }

        this.tblMensualidades.setModel(this.mensualidadesTabla);
        lblTotal.setText("Cantidad de mensualidad generadas hasta la fecha: " + storageAlquileres.getTotal());

    }

    /**
     * Método que permite obtener la fecha actual del equipo
     */
    private void obtenerFecha() {

        Date fecha = new Date();
        String formato = "dd-MM-yyyy";
        SimpleDateFormat form = new SimpleDateFormat(formato);
        txtFechaActual.setText(form.format(fecha));

    }

//    /**
//     * Método que nos permite filtrar por el año
//     */
//    private void filtrarporAnio() {
//        if (chkAnio.isSelected()) {
//            String[] titulos = {"Consecutivo", "Núm. Alquiler", "Fech. Creación", "Inquilino", "Mes en cobro", "Año", "Descuento", "Monto a pagar", "Estado"};
//            this.mensualidadesTabla = new DefaultTableModel(null, titulos);
//            this.mensualidad = new Mensualidades();
//
//            if (!txtFiltrarAnio.getText().equals("")) {
//                for (int i = 0; i < storageMensualidades.getTotal(); i++) {
//
//                    mensualidad = storageMensualidades.obtenerMensualidad(i);
//                    int año = this.mensualidad.getAnioActual();
//                    int añoDigitado = Integer.parseInt(txtFiltrarAnio.getText());
//
//                    if (año == añoDigitado) {
//                        Object newRgistro[] = {this.mensualidad.getConsecutivo(), this.mensualidad.getNumAlquiler(), this.mensualidad.getFechCreacion(),
//                            this.mensualidad.getNomInqui(), this.mensualidad.getMesCobro(), this.mensualidad.getAnioActual(), this.mensualidad.getDescuento() + "%",
//                            this.mensualidad.getMontoMes(), this.mensualidad.getEstado()};
//                        this.mensualidadesTabla.addRow(newRgistro);
//                    }
//                    this.tblMensualidades.setModel(this.mensualidadesTabla);
//                }
//            }
//
//        } else {
//            rellenarTabla();
//        }
//    }
//
//    /**
//     * Método que nos permite filtrar por mes
//     */
//    private void filtrarPorMes() {
//        if (chkMes.isSelected()) {
//
//            String[] titulos = {"Consecutivo", "Núm. Alquiler", "Fech. Creación", "Inquilino", "Mes en cobro", "Año", "Descuento", "Monto a pagar", "Estado"};
//            this.mensualidadesTabla = new DefaultTableModel(null, titulos);
//            this.mensualidad = new Mensualidades();
//
//            if (!txtFiltrarMes.getText().equals("")) {
//                for (int i = 0; i < storageMensualidades.getTotal(); i++) {
//
//                    mensualidad = storageMensualidades.obtenerMensualidad(i);
//                    int mes = this.mensualidad.getMesCobro();
//                    int mesDigitado = Integer.parseInt(txtFiltrarMes.getText());
//
//                    if (mes == mesDigitado) {
//                        Object newRgistro[] = {this.mensualidad.getConsecutivo(), this.mensualidad.getNumAlquiler(), this.mensualidad.getFechCreacion(),
//                            this.mensualidad.getNomInqui(), this.mensualidad.getMesCobro(), this.mensualidad.getAnioActual(), this.mensualidad.getDescuento() + "%",
//                            this.mensualidad.getMontoMes(), this.mensualidad.getEstado()};
//                        this.mensualidadesTabla.addRow(newRgistro);
//                    }
//                    this.tblMensualidades.setModel(this.mensualidadesTabla);
//                }
//            }
//
//        } else {
//            rellenarTabla();
//        }
//    }
//
//    /**
//     * Método que nos permite filtrar por nombre
//     */
//    private void filtrarPorNombre() {
//
//        if (chkInquilino.isSelected()) {
//
//            String[] titulos = {"Consecutivo", "Núm. Alquiler", "Fech. Creación", "Inquilino", "Mes en cobro", "Año", "Descuento", "Monto a pagar", "Estado"};
//            this.mensualidadesTabla = new DefaultTableModel(null, titulos);
//            this.mensualidad = new Mensualidades();
//
//            if (!txtFiltrarInqui.getText().equals("")) {
//                for (int i = 0; i < storageMensualidades.getTotal(); i++) {
//                    mensualidad = storageMensualidades.obtenerMensualidad(i);
//                    if (mensualidad.getNomInqui().regionMatches(true, 0, txtFiltrarInqui.getText(), 0, txtFiltrarInqui.getText().length())) {
//                        Object newRgistro[] = {this.mensualidad.getConsecutivo(), this.mensualidad.getNumAlquiler(), this.mensualidad.getFechCreacion(),
//                            this.mensualidad.getNomInqui(), this.mensualidad.getMesCobro(), this.mensualidad.getAnioActual(), this.mensualidad.getDescuento() + "%",
//                            this.mensualidad.getMontoMes(), this.mensualidad.getEstado()};
//                        this.mensualidadesTabla.addRow(newRgistro);
//                    }
//                    this.tblMensualidades.setModel(this.mensualidadesTabla);
//                }
//            }
//
//        } else {
//            rellenarTabla();
//        }
//    }
}
